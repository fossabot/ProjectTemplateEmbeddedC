/*
 * This file has been auto-generated by CppUTestMock v0.4.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "ExampleModule_expect.hpp"

namespace expect {
MockExpectedCall& ExampleModule_f1(CppUMockGen::Parameter<int> a, CppUMockGen::Parameter<int> b, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectOneCall("ExampleModule_f1");
    if(a.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("a", a.getValue()); }
    if(b.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("b", b.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
MockExpectedCall& ExampleModule_f1(unsigned int __numCalls__, CppUMockGen::Parameter<int> a, CppUMockGen::Parameter<int> b, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "ExampleModule_f1");
    if(a.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("a", a.getValue()); }
    if(b.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("b", b.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

